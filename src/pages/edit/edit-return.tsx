import React, { useState, useEffect } from 'react';import { useNavigate, useParams } from 'react-router-dom';import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';import { Input } from '@/components/ui/input';import { Button } from '@/components/ui/button';import { Label } from '@/components/ui/label';import { Textarea } from '@/components/ui/textarea';import { Badge } from '@/components/ui/badge';import { Trash2, Save, ArrowRight, Plus, Minus } from 'lucide-react';import { toast } from 'sonner';import { motion } from 'framer-motion';interface ReturnItem {  id?: string;  itemName: string;  itemNumber: string;  originalQty: number;  returnedQty: number;  maxReturnQty: number;  price: number;  cost?: number;  discountPercent?: number;  discountValue?: number;  taxPercent?: number;  taxValue?: number;  warehouseId?: string;  unit?: string;  mainCategory?: string;}interface ReturnData {  id?: string;  referenceNumber: string;  invoiceNumber: string;  date: string;  customerName: string;  customerPhone?: string;  customerAddress?: string;  seller?: string;  paymentMethod?: string;  branch?: string;  warehouse?: string;  items: ReturnItem[];  notes?: string;  totalAmount?: number;  createdAt?: { seconds: number; nanoseconds: number } | string | Date;  updatedAt?: { seconds: number; nanoseconds: number } | string | Date;}const EditReturn: React.FC = () => {  const { id } = useParams<{ id: string }>();  const navigate = useNavigate();  const [loading, setLoading] = useState(true);  const [saving, setSaving] = useState(false);  const [returnData, setReturnData] = useState<ReturnData>({    referenceNumber: '',    invoiceNumber: '',    date: new Date().toISOString().split('T')[0],    customerName: '',    customerPhone: '',    customerAddress: '',    seller: '',    paymentMethod: '',    branch: '',    warehouse: '',    items: [],    notes: ''  });  useEffect(() => {    const loadData = async () => {      if (!id) return;            try {        const { doc, getDoc } = await import('firebase/firestore');        const { db } = await import('@/lib/firebase');                const returnDoc = await getDoc(doc(db, 'sales_returns', id));                if (returnDoc.exists()) {          const data = returnDoc.data();          setReturnData({            id: returnDoc.id,            referenceNumber: data.referenceNumber || '',            invoiceNumber: data.invoiceNumber || '',            date: data.date || '',            customerName: data.customerName || data.customer || '',            customerPhone: data.customerPhone || '',            customerAddress: data.customerAddress || '',            seller: data.seller || '',            paymentMethod: data.paymentMethod || '',            branch: data.branch || '',            warehouse: data.warehouse || '',            items: data.items || [],            notes: data.notes || '',            totalAmount: data.totalAmount || 0,            createdAt: data.createdAt,            updatedAt: data.updatedAt          });        } else {          toast.error('لم يتم العثور على المرتجع');          navigate('/returns');        }      } catch (error) {        console.error('خطأ في جلب بيانات المرتجع:', error);        toast.error('حدث خطأ في جلب البيانات');      } finally {        setLoading(false);      }    };        loadData();  }, [id, navigate]);  const updateItemQuantity = (index: number, newQty: number) => {    const updatedItems = [...returnData.items];    const item = updatedItems[index];        const maxQty = item.maxReturnQty || item.originalQty || 0;    if (newQty > maxQty) {      toast.error(`الكمية المرتجعة لا يمكن أن تتجاوز ${maxQty}`);      return;    }        if (newQty < 0) {      toast.error('الكمية المرتجعة لا يمكن أن تكون سالبة');      return;    }    updatedItems[index] = {      ...item,      returnedQty: newQty    };    setReturnData(prev => ({      ...prev,      items: updatedItems    }));  };  const removeItem = (index: number) => {    const updatedItems = returnData.items.filter((_, i) => i !== index);    setReturnData(prev => ({      ...prev,      items: updatedItems    }));  };  const calculateTotals = () => {    let total = 0;    returnData.items.forEach(item => {      const itemTotal = (Number(item.price) || 0) * (item.returnedQty || 0);      const discount = (Number(item.discountValue) || 0);      const tax = (Number(item.taxValue) || 0);      total += itemTotal - discount + tax;    });    return total;  };  const handleSave = async () => {    if (!returnData.items.length) {      toast.error('يجب إضافة صنف واحد على الأقل');      return;    }    setSaving(true);    try {      const { doc, updateDoc, serverTimestamp } = await import('firebase/firestore');      const { db } = await import('@/lib/firebase');      const updateData = {        ...returnData,        totalAmount: calculateTotals(),        updatedAt: serverTimestamp()      };      await updateDoc(doc(db, 'sales_returns', id!), updateData);            toast.success('تم حفظ التعديلات بنجاح');      navigate('/returns');    } catch (error) {      console.error('خطأ في حفظ التعديلات:', error);      toast.error('حدث خطأ في حفظ التعديلات');    } finally {      setSaving(false);    }  };  if (loading) {    return (      <div className="flex items-center justify-center min-h-screen bg-gradient-to-br from-blue-50 to-purple-50">        <motion.div          initial={{ opacity: 0, scale: 0.9 }}          animate={{ opacity: 1, scale: 1 }}          className="text-center"        >          <div className="animate-spin rounded-full h-16 w-16 border-4 border-blue-600 border-t-transparent mx-auto"></div>          <p className="mt-4 text-gray-600 font-medium">جاري تحميل بيانات المرتجع...</p>        </motion.div>      </div>    );  }  return (    <div className="min-h-screen bg-gradient-to-br from-blue-50 to-purple-50 p-6">      {/* Header with Animation */}      <motion.div        initial={{ y: -20, opacity: 0 }}        animate={{ y: 0, opacity: 1 }}        className="bg-white rounded-xl shadow-lg p-6 mb-6 border border-blue-100"      >        <div className="flex items-center justify-between">          <div className="flex items-center space-x-4 rtl:space-x-reverse">            <motion.div              animate={{ rotate: [0, 10, -10, 0] }}              transition={{ duration: 2, repeat: Infinity }}              className="text-3xl"            >              ✨            </motion.div>            <div>              <h1 className="text-3xl font-bold bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">                تعديل مرتجع              </h1>              <p className="text-gray-600 mt-1">رقم المرتجع: {returnData.referenceNumber}</p>            </div>          </div>          <div className="flex gap-3">            <Button               variant="outline"               onClick={() => navigate('/returns')}              className="flex items-center gap-2 hover:shadow-md transition-all duration-200"            >              <ArrowRight className="w-4 h-4" />              العودة للقائمة            </Button>            <Button               onClick={handleSave}              disabled={saving}              className="flex items-center gap-2 bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 shadow-lg hover:shadow-xl transition-all duration-200"            >              <Save className="w-4 h-4" />              {saving ? 'جاري الحفظ...' : 'حفظ التعديلات'}            </Button>          </div>        </div>      </motion.div>      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">        {/* معلومات المرتجع */}        <div className="lg:col-span-2">          <motion.div            initial={{ x: -20, opacity: 0 }}            animate={{ x: 0, opacity: 1 }}            transition={{ delay: 0.1 }}          >            <Card className="shadow-xl border-0 bg-white/80 backdrop-blur-sm">              <CardHeader className="bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-t-lg">                <CardTitle className="text-xl font-bold">معلومات المرتجع</CardTitle>              </CardHeader>              <CardContent className="p-6 space-y-6">                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">                  <div className="space-y-2">                    <Label htmlFor="referenceNumber" className="text-sm font-semibold text-gray-700">رقم المرتجع</Label>                    <Input                      id="referenceNumber"                      value={returnData.referenceNumber}                      onChange={(e) => setReturnData(prev => ({ ...prev, referenceNumber: e.target.value }))}                      placeholder="رقم المرتجع"                      className="border-gray-300 focus:border-blue-500 focus:ring-blue-500"                    />                  </div>                  <div className="space-y-2">                    <Label htmlFor="invoiceNumber" className="text-sm font-semibold text-gray-700">رقم الفاتورة الأصلية</Label>                    <Input                      id="invoiceNumber"                      value={returnData.invoiceNumber}                      onChange={(e) => setReturnData(prev => ({ ...prev, invoiceNumber: e.target.value }))}                      placeholder="رقم الفاتورة"                      className="border-gray-300 focus:border-blue-500 focus:ring-blue-500"                    />                  </div>                  <div className="space-y-2">                    <Label htmlFor="date" className="text-sm font-semibold text-gray-700">التاريخ</Label>                    <Input                      id="date"                      type="date"                      value={returnData.date}                      onChange={(e) => setReturnData(prev => ({ ...prev, date: e.target.value }))}                      className="border-gray-300 focus:border-blue-500 focus:ring-blue-500"                    />                  </div>                  <div className="space-y-2">                    <Label htmlFor="customerName" className="text-sm font-semibold text-gray-700">اسم العميل</Label>                    <Input                      id="customerName"                      value={returnData.customerName}                      onChange={(e) => setReturnData(prev => ({ ...prev, customerName: e.target.value }))}                      placeholder="اسم العميل"                      className="border-gray-300 focus:border-blue-500 focus:ring-blue-500"                    />                  </div>                  <div className="space-y-2">                    <Label htmlFor="customerPhone" className="text-sm font-semibold text-gray-700">رقم الهاتف</Label>                    <Input                      id="customerPhone"                      value={returnData.customerPhone}                      onChange={(e) => setReturnData(prev => ({ ...prev, customerPhone: e.target.value }))}                      placeholder="رقم الهاتف"                      className="border-gray-300 focus:border-blue-500 focus:ring-blue-500"                    />                  </div>                  <div className="space-y-2">                    <Label htmlFor="seller" className="text-sm font-semibold text-gray-700">البائع</Label>                    <Input                      id="seller"                      value={returnData.seller}                      onChange={(e) => setReturnData(prev => ({ ...prev, seller: e.target.value }))}                      placeholder="اسم البائع"                      className="border-gray-300 focus:border-blue-500 focus:ring-blue-500"                    />                  </div>                </div>                                <div className="space-y-2">                  <Label htmlFor="notes" className="text-sm font-semibold text-gray-700">ملاحظات</Label>                  <Textarea                    id="notes"                    value={returnData.notes}                    onChange={(e) => setReturnData(prev => ({ ...prev, notes: e.target.value }))}                    placeholder="ملاحظات إضافية..."                    rows={3}                    className="border-gray-300 focus:border-blue-500 focus:ring-blue-500"                  />                </div>              </CardContent>            </Card>          </motion.div>        </div>        {/* ملخص المرتجع */}        <div>          <motion.div            initial={{ x: 20, opacity: 0 }}            animate={{ x: 0, opacity: 1 }}            transition={{ delay: 0.2 }}          >            <Card className="shadow-xl border-0 bg-white/80 backdrop-blur-sm">              <CardHeader className="bg-gradient-to-r from-green-600 to-blue-600 text-white rounded-t-lg">                <CardTitle className="text-xl font-bold">ملخص المرتجع</CardTitle>              </CardHeader>              <CardContent className="p-6">                <div className="space-y-4">                  <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">                    <span className="font-medium text-gray-700">عدد الأصناف:</span>                    <Badge variant="secondary" className="text-lg px-3 py-1">                      {returnData.items.length}                    </Badge>                  </div>                  <div className="flex justify-between items-center p-3 bg-gray-50 rounded-lg">                    <span className="font-medium text-gray-700">إجمالي الكمية:</span>                    <Badge variant="secondary" className="text-lg px-3 py-1">                      {returnData.items.reduce((sum, item) => sum + (item.returnedQty || 0), 0)}                    </Badge>                  </div>                  <div className="border-t pt-4">                    <div className="flex justify-between items-center p-4 bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg">                      <span className="font-bold text-gray-800">الإجمالي:</span>                      <span className="font-bold text-2xl text-blue-600">                        {calculateTotals().toFixed(2)} ريال                      </span>                    </div>                  </div>                </div>              </CardContent>            </Card>          </motion.div>        </div>      </div>      {/* أصناف المرتجع */}      <motion.div        initial={{ y: 20, opacity: 0 }}        animate={{ y: 0, opacity: 1 }}        transition={{ delay: 0.3 }}        className="mt-6"      >        <Card className="shadow-xl border-0 bg-white/80 backdrop-blur-sm">          <CardHeader className="bg-gradient-to-r from-purple-600 to-pink-600 text-white rounded-t-lg">            <CardTitle className="text-xl font-bold">أصناف المرتجع</CardTitle>          </CardHeader>          <CardContent className="p-6">            {returnData.items.length === 0 ? (              <div className="text-center py-12">                <div className="text-6xl mb-4">📦</div>                <p className="text-gray-500 text-lg">لا توجد أصناف في هذا المرتجع</p>              </div>            ) : (              <div className="space-y-4">                {returnData.items.map((item, index) => (                  <motion.div                    key={index}                    initial={{ opacity: 0, y: 10 }}                    animate={{ opacity: 1, y: 0 }}                    transition={{ delay: index * 0.1 }}                    className="border border-gray-200 rounded-xl p-6 bg-gradient-to-r from-gray-50 to-blue-50 hover:shadow-lg transition-all duration-200"                  >                    <div className="grid grid-cols-1 md:grid-cols-6 gap-4 items-center">                      <div className="md:col-span-2">                        <Label className="text-sm text-gray-600 font-semibold">اسم الصنف</Label>                        <p className="font-bold text-gray-800 text-lg">{item.itemName}</p>                        <p className="text-sm text-gray-500">كود: {item.itemNumber}</p>                      </div>                                            <div>                        <Label className="text-sm text-gray-600 font-semibold">الكمية الأصلية</Label>                        <p className="font-bold text-blue-600 text-lg">{item.originalQty || 0}</p>                      </div>                                            <div>                        <Label className="text-sm text-gray-600 font-semibold">الكمية المرتجعة</Label>                        <div className="flex items-center gap-2 mt-2">                          <Button                            size="sm"                            variant="outline"                            onClick={() => updateItemQuantity(index, (item.returnedQty || 0) - 1)}                            disabled={(item.returnedQty || 0) <= 0}                            className="h-8 w-8 p-0 hover:bg-red-50"                          >                            <Minus className="w-3 h-3" />                          </Button>                          <Input                            type="number"                            value={item.returnedQty || 0}                            onChange={(e) => updateItemQuantity(index, Number(e.target.value))}                            className="w-20 text-center font-bold border-gray-300 focus:border-blue-500"                            min="0"                            max={item.maxReturnQty || item.originalQty || 0}                          />                          <Button                            size="sm"                            variant="outline"                            onClick={() => updateItemQuantity(index, (item.returnedQty || 0) + 1)}                            disabled={(item.returnedQty || 0) >= (item.maxReturnQty || item.originalQty || 0)}                            className="h-8 w-8 p-0 hover:bg-green-50"                          >                            <Plus className="w-3 h-3" />                          </Button>                        </div>                        <p className="text-xs text-gray-500 mt-1">                          الحد الأقصى: {item.maxReturnQty || item.originalQty || 0}                        </p>                      </div>                                            <div>                        <Label className="text-sm text-gray-600 font-semibold">السعر</Label>                        <p className="font-bold text-gray-800 text-lg">{(Number(item.price) || 0).toFixed(2)} ريال</p>                      </div>                                            <div className="flex justify-between items-center">                        <div>                          <Label className="text-sm text-gray-600 font-semibold">الإجمالي</Label>                          <p className="font-bold text-green-600 text-xl">                            {((Number(item.price) || 0) * (item.returnedQty || 0)).toFixed(2)} ريال                          </p>                        </div>                        <Button                          size="sm"                          variant="destructive"                          onClick={() => removeItem(index)}                          className="ml-2 hover:bg-red-600 shadow-md"                        >                          <Trash2 className="w-4 h-4" />                        </Button>                      </div>                    </div>                  </motion.div>                ))}              </div>            )}          </CardContent>        </Card>      </motion.div>    </div>  );};export default EditReturn;